import telebot
import config
import requests
import json
import os

bot = telebot.TeleBot(config.api_key)

# check for folder users existence
if 'users' not in os.listdir():
    os.mkdir("users")

print('Bot started')


def get_weather_5d_ru(city, usr_id):
    url = "https://community-open-weather-map.p.rapidapi.com/forecast"

    querystring = {"lang": "ru", "q": f"{city}"}

    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }

    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return '–ó–∞–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    data = json.loads(response.text)
    s = ''
    result = []
    for i in data['list']:
        date = str(i['dt_txt']).split(' ')
        day = date[0].split('-')
        day = f'{day[2]}/{day[1]}/{day[0]}'
        time_ = date[1].split(':')
        time_ = f'{time_[0]}:00'
        tempa = '{0:+3.0f}'.format(int(i['main']['temp'])-273.15)
        weath = i['weather'][0]['description']
        if time_ == '12:00':
            s = f'''{day} {time_} :
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{tempa}¬∞C
–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weath}\n\n'''
            result.append(s)
    return result


def get_weather_5d_ua(city, usr_id):
    url = "https://community-open-weather-map.p.rapidapi.com/forecast"

    querystring = {"lang": "ua", "q": f"{city}"}

    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }

    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return '–ó–∞–¥–∞–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î'
    data = json.loads(response.text)
    s = ''
    result = []
    for i in data['list']:
        date = str(i['dt_txt']).split(' ')
        day = date[0].split('-')
        day = f'{day[2]}/{day[1]}/{day[0]}'
        time_ = date[1].split(':')
        time_ = f'{time_[0]}:00'
        tempa = '{0:+3.0f}'.format(int(i['main']['temp'])-273.15)
        weath = i['weather'][0]['description']
        if time_ == '12:00':
            s = f'''{day} {time_} :
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{tempa}¬∞C
–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: {weath}\n\n'''
            result.append(s)
    return result


def get_weather_5d_eng(city, usr_id):
    url = "https://community-open-weather-map.p.rapidapi.com/forecast"

    querystring = {"lang": "eng", "q": f"{city}"}

    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }

    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return 'The specified city does not exist'
    data = json.loads(response.text)
    s = ''
    result = []
    for i in data['list']:
        date = str(i['dt_txt']).split(' ')
        day = date[0].split('-')
        day = f'{day[2]}/{day[1]}/{day[0]}'
        time_ = date[1].split(':')
        time_ = f'{time_[0]}:00'
        tempa = '{0:+3.0f}'.format(int(i['main']['temp'])-273.15)
        weath = i['weather'][0]['description']
        if time_ == '12:00':
            s = f'''{day} {time_} :
Temperature:{tempa}¬∞C
Weather: {weath}\n\n'''
            result.append(s)
    return result


def get_weather_today_rus(city):
    url = "https://community-open-weather-map.p.rapidapi.com/weather"
    querystring = {"lang": "ru", "q": f"{city}"}
    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }
    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return '–ó–∞–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    weather = json.loads(response.text)
    weather_now = weather['weather'][0]['description']
    weather_temp_now = weather['main']['temp'] - 273.15
    weather_temp_feels_like = weather['main']['feels_like'] - 273.15
    weather_temp_min = weather['main']['temp_min'] - 273.15
    weather_temp_max = weather['main']['temp_max'] - 273.15
    weather_pressure = round((int(weather['main']['pressure'])/1.333), 2)
    weather_humidity = weather['main']['humidity']
    weather_wind_speed = weather['wind']['speed']
    weather_info = f'''–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_now}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:
    –°–µ–π—á–∞—Å: {int(weather_temp_now)}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {int(weather_temp_feels_like)}¬∞C
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {int(weather_temp_min)}¬∞C
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {int(weather_temp_max)}¬∞C

–î–∞–≤–ª–µ–Ω–∏–µ: {weather_pressure} –º–º —Ä—Ç.—Å—Ç.

–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_humidity}%

–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_wind_speed} –º/—Å'''

    return weather_info


def get_weather_today_ua(city):
    url = "https://community-open-weather-map.p.rapidapi.com/weather"
    querystring = {"lang": "ua", "q": f"{city}"}
    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }
    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return '–ó–∞–¥–∞–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ —ñ—Å–Ω—É—î'
    weather = json.loads(response.text)
    weather_now = weather['weather'][0]['description']
    weather_temp_now = weather['main']['temp'] - 273.15
    weather_temp_feels_like = weather['main']['feels_like'] - 273.15
    weather_temp_min = weather['main']['temp_min'] - 273.15
    weather_temp_max = weather['main']['temp_max'] - 273.15
    weather_pressure = round((int(weather['main']['pressure'])/1.333), 2)
    weather_humidity = weather['main']['humidity']
    weather_wind_speed = weather['wind']['speed']
    weather_info = f'''–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: {weather_now}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:
    –ó–∞—Ä–∞–∑: {int(weather_temp_now)}¬∞C, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {int(weather_temp_feels_like)}¬∞C
    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {int(weather_temp_min)}¬∞C
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {int(weather_temp_max)}¬∞C

–¢–∏—Å–∫: {weather_pressure} –º–º —Ä—Ç.—Å—Ç.

–í–æ–ª–æ–≥—ñ—Å—Ç—å: {weather_humidity}%

–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {weather_wind_speed} –º/—Å'''

    return weather_info


def get_weather_today_eng(city):
    url = "https://community-open-weather-map.p.rapidapi.com/weather"
    querystring = {"lang": "eng", "q": f"{city}"}
    headers = {
        'x-rapidapi-host': "community-open-weather-map.p.rapidapi.com",
        'x-rapidapi-key': "type here your api key"
        }
    response = requests.request("GET", url, headers=headers, params=querystring)
    if str(response) == '<Response [404]>':
        return 'The specified city does not exist'
    weather = json.loads(response.text)
    weather_now = weather['weather'][0]['description']
    weather_temp_now = weather['main']['temp'] - 273.15
    weather_temp_feels_like = weather['main']['feels_like'] - 273.15
    weather_temp_min = weather['main']['temp_min'] - 273.15
    weather_temp_max = weather['main']['temp_max'] - 273.15
    weather_pressure = round((int(weather['main']['pressure'])/1.333), 2)
    weather_humidity = weather['main']['humidity']
    weather_wind_speed = weather['wind']['speed']
    weather_info = f'''Weather: {weather_now}

Temperature:
    Now: {int(weather_temp_now)}¬∞C, feels like {int(weather_temp_feels_like)}¬∞C
    Minimum temperature today: {int(weather_temp_min)}¬∞C
    Maximum temperature for today: {int(weather_temp_max)}¬∞C

Pressure: {weather_pressure} mmHg

Humidity: {weather_humidity}%

Wind speed: {weather_wind_speed} m/s'''

    return weather_info


def cng_lng(user_id):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(
        text='–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='rus'))
    markup.add(telebot.types.InlineKeyboardButton(
        text='–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶', callback_data='ua'))
    markup.add(telebot.types.InlineKeyboardButton(
        text='English üá∫üá∏', callback_data='eng'))
    bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —è–∑—ã–∫ –Ω–∏–∂–µ!\n\n–í—ñ—Ç–∞–Ω–Ω—è! –û–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–≤—É –Ω–∏–∂—á–µ!\n\nHello! Choose your language below!', reply_markup=markup)


def reg(user_id):
    if 'last_request' not in os.listdir(f'users/{user_id}'):
        f = open(f'users/{user_id}/last_request', 'w')
        f.write('')
        f.close()
        hello_message(user_id)
    else:
        hello_message(user_id)


def hello_message(user_id):
    f = open(f'users/{user_id}/lang', 'r')
    lng = f.read()
    if lng == 'rus':
        bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ!\n(–¢—ã –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ /help)\n(–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /lang)', reply_markup=config.get_keyboard_rus())
    elif lng == 'ua':
        bot.send_message(user_id, '–í—ñ—Ç–∞–Ω–Ω—è!\n–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É —Ç–≤–æ–≥–æ –º—ñ—Å—Ç–∞, —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ!\n(–¢–∏ –º–æ–∂–µ—à –∑–Ω–æ–≤—É –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /start –∞–±–æ /help)\n(–¢–∞–∫–æ–∂ —Ç–∏ –º–æ–∂–µ—à –ø–æ–º—ñ–Ω—è—Ç–∏ –º–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /lang)', reply_markup=config.get_keyboard_ua())
    else:
        bot.send_message(user_id, 'Hello!\nWrite me the name of your city and I will send information about the weather in your city!\n(You can call this message again with the command /start or /help)\n(You can also change the language with the /lang command)', reply_markup=config.get_keyboard_en())


@bot.message_handler(commands=['lang'])
def lang_message(message):
    user_id = message.chat.id
    cng_lng(user_id)


@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    user_id = message.chat.id
    if str(user_id) in os.listdir('users'):
        hello_message(user_id)
    else:
        os.system(f'mkdir users/{user_id}')
        cng_lng(user_id)


@bot.message_handler(content_types=["text"])
def weather_message(message):
    user_id = message.chat.id
    text = message.text
    if text == '–ü–æ–≥–æ–¥–∞: —Å–µ–π—á–∞—Å':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, '–°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=config.get_keyboard_rus)
        else:
            s = get_weather_today_rus(req)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_rus())

    elif text == '–ü–æ–≥–æ–¥–∞: –∑–∞—Ä–∞–∑':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, '–ó—Ä–æ–±—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó', reply_markup=config.get_keyboard_ua())
        else:
            s = get_weather_today_ua(req)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_ua())

    elif text == 'Weather: now':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, 'Make at least one request to use this feature', reply_markup=config.get_keyboard_en())
        else:
            s = get_weather_today_eng(req)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_en())

    elif text == '–ü–æ–≥–æ–¥–∞: 5 –¥–Ω–µ–π':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, '–°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=config.get_keyboard_rus())
            return
        answ = get_weather_5d_ru(req, user_id)
        if 'str' in str(type(answ)):
            bot.send_message(user_id, answ, reply_markup=config.get_keyboard_rus())
        else:
            bot.send_message(user_id, f'–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ –ø–æ –≥–æ—Ä–æ–¥—É "{req}"', reply_markup=config.get_keyboard_rus())
            for i in answ:
                bot.send_message(user_id, i, reply_markup=config.get_keyboard_rus())

    elif text == '–ü–æ–≥–æ–¥–∞: 5 –¥–Ωi–≤':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, '–ó—Ä–æ–±—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó', reply_markup=config.get_keyboard_ua())
            return
        answ = get_weather_5d_ua(req, user_id)
        if 'str' in str(type(answ)):
            bot.send_message(user_id, answ, reply_markup=config.get_keyboard_ua())
        else:
            bot.send_message(user_id, f'–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 5 –¥–Ω—ñ–≤ –ø–æ –º—ñ—Å—Ç—É "{req}"', reply_markup=config.get_keyboard_ua())
            for i in answ:
                bot.send_message(user_id, i, reply_markup=config.get_keyboard_ua())

    elif text == 'Weather: 5 days':
        f = open(f'users/{user_id}/last_request', 'r')
        req = f.read()
        if req == '':
            bot.send_message(user_id, 'Make at least one request to use this feature', reply_markup=config.get_keyboard_en())
            return
        answ = get_weather_5d_eng(req, user_id)
        if 'str' in str(type(answ)):
            bot.send_message(user_id, answ, reply_markup=config.get_keyboard_en())
        else:
            bot.send_message(user_id, f'Weather for 5 days ahead in the city "{req}"', reply_markup=config.get_keyboard_en())
            for i in answ:
                bot.send_message(user_id, i, reply_markup=config.get_keyboard_en())

    elif text == '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞' or text == '–ó–º—ñ–Ω–∞ –º–æ–≤–∏' or text == 'Switch language':
        cng_lng(user_id)

    else:
        f = open(f'users/{user_id}/last_request', 'w')
        f.write(text)
        f.close()
        f = open(f'users/{user_id}/lang', 'r')
        lng = f.read()
        f.close()
        if lng == 'rus':
            s = get_weather_today_rus(text)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_rus())
        elif lng == 'ua':
            s = get_weather_today_ua(text)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_ua())
        else:
            s = get_weather_today_eng(text)
            bot.send_message(user_id, s, reply_markup=config.get_keyboard_en())


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    user_id = call.from_user.id
    if call.data == 'rus':
        f = open(f'users/{user_id}/lang', 'w')
        f.write('rus')
        f.close()
        reg(user_id)
    elif call.data == 'ua':
        f = open(f'users/{user_id}/lang', 'w')
        f.write('ua')
        f.close()
        reg(user_id)
    elif call.data == 'eng':
        f = open(f'users/{user_id}/lang', 'w')
        f.write('eng')
        f.close()
        reg(user_id)
    else:
        pass


bot.polling()
